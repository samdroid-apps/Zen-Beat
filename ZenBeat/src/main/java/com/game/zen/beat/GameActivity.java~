/*This file is part of Zen Beat.

    Zen Beat is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Zen Beat is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Zen Beat.  If not, see <http://www.gnu.org/licenses/>.*/

package com.game.zen.beat;

import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

import com.game.zen.beat.MenuActivity;

import android.R.integer;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.media.AudioManager;
import android.media.SoundPool;
import android.media.SoundPool.OnLoadCompleteListener;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

public class GameActivity extends Activity implements OnTouchListener {

	
	public static final String PREFS_NAME = "ZeatrotPref";
	TimerTask timerPhy;
	Timer timer = new Timer();
	protected long usn;
	protected long soundName;
	protected boolean canAnswer = false;
	protected int sound1;
	protected int sound2;
	protected int sound3;
	protected int sound4;
	protected int sound5;
	protected int sound6;
	protected int sound7;
	protected int sound8;
	protected SoundPool sp;
	protected float levelPoints = 6;
	protected float level = 0;
	protected float levelCalc = 0;
	protected float userPoints = 0;
	protected boolean replay = false;
	protected int i = 0;
	protected int i2 = 0;
	protected int skip = 0;
	protected int si = 0;
	protected Random rnd = new Random();
	protected int loaded = 0;
	protected int RND_MAX = 8;
	protected ProgressBar pb;
	protected int answered = 0;
	protected int mustAnswer = 0;
	int MinNum = 1000;
	
	protected Dialog onCreateDialog(int id) {
	    Dialog dialog;
	    switch(id) {
	    case 0:
	    	dialog = ProgressDialog.show(this, "", "Loading, Please wait...", true);
	        break;
	    default:
	        dialog = null;
	    }
	    return dialog;
	}
	
	protected void mark() {
		Log.i("varInfo",Long.toString(soundName));
		Log.i("varInfo",Long.toString(usn));	
		answered = 0;
		if (usn == soundName) {
			//RIGHT
			Log.i("GameResult","uWIN");
			userPoints++;
			if (userPoints > levelPoints) {
				userPoints = 0;
				level++;
				if (level >= 12) {
					levelCalc = level - 12; 
				}
				if (level >= 6) {
					levelCalc = level - 6; 
				}
				if (level >= 1) {
					levelCalc = level - 1; 
				}
				
				if (level == 15) {
					
					LayoutInflater inflater = getLayoutInflater();
					View layout = inflater.inflate(R.layout.toast_dragon,
					                               (ViewGroup) findViewById(R.id.toast_layout_root));

					Toast toast = new Toast(this);
					toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);
					toast.setDuration(Toast.LENGTH_LONG);
					toast.setView(layout);
					toast.show();
				} else {	
				LayoutInflater inflater = getLayoutInflater();
				View layout = inflater.inflate(R.layout.toast_level_up,
				                               (ViewGroup) findViewById(R.id.toast_layout_root));

				Toast toast = new Toast(this);
				toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);
				toast.setDuration(Toast.LENGTH_LONG);
				toast.setView(layout);
				toast.show();
				}
				
				TextView ltv = (TextView) findViewById(R.id.levelText1);
				ltv.setText("Level " + Integer.toString(((int)level)+1));
				
				ImageView b3 = (ImageView)findViewById(R.id.b3);
				b3.setImageResource(R.drawable.b3);
				ImageView b4 = (ImageView)findViewById(R.id.b4);
				b4.setImageResource(R.drawable.b4);
				ImageView b5 = (ImageView)findViewById(R.id.b5);
				b5.setImageResource(R.drawable.b5);
				ImageView b6 = (ImageView)findViewById(R.id.b6);
				b6.setImageResource(R.drawable.b6);
				ImageView b7 = (ImageView)findViewById(R.id.b7);
				b7.setImageResource(R.drawable.b7);
				ImageView b8 = (ImageView)findViewById(R.id.b8);
				b8.setImageResource(R.drawable.b8);
				
				ImageView tv = (ImageView)findViewById(R.id.textView1);
				tv.setVisibility(8);
				
				if (level < 12) {
					 b7.setImageResource(R.drawable.trans);
					 b8.setImageResource(R.drawable.trans);
					 RND_MAX = 6;
				 }
				if (level < 6) {
					 b5.setVisibility(0);//8 = GONE
					 b5.setImageResource(R.drawable.trans);
					 b6.setVisibility(0);//8 = GONE
					 b6.setImageResource(R.drawable.trans);
					 RND_MAX = 4;
				 }
				if (level < 1) {
					b3.setVisibility(0);//8 = GONE
					b3.setImageResource(R.drawable.trans);
					b4.setVisibility(0);//8 = GONE
					b4.setImageResource(R.drawable.trans);
					RND_MAX = 2;
				}
				
			    if (level == 16) {
			    	Intent intent = new Intent(getBaseContext(), EndVideo.class);
			        startActivity(intent);
			        finish();
			    }
			} else {
			
			LayoutInflater inflater = getLayoutInflater();
			View layout = inflater.inflate(R.layout.toast_win,
			                               (ViewGroup) findViewById(R.id.toast_layout_root));

			Toast toast = new Toast(this);
			toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);
			toast.setDuration(Toast.LENGTH_LONG);
			toast.setView(layout);
			toast.show();
			}
		}
		if (usn != soundName){
			//WRONG
			Log.i("GameResult","LOSE");
			
			LayoutInflater inflater = getLayoutInflater();
			View layout = inflater.inflate(R.layout.toast_lose,
			                               (ViewGroup) findViewById(R.id.toast_layout_root));

			Toast toast = new Toast(this);
			toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);
			toast.setDuration(Toast.LENGTH_LONG);
			toast.setView(layout);
			toast.show();
		}
		int progress = (int) ((userPoints / levelPoints)*100);
		pb.setProgress(progress);
		
		usn = 0;
		soundName = 0; 
		canAnswer = false;
		i = 0;
		skip = 3;
	}
	
	class TimerPhy extends TimerTask {


		
		public TimerPhy(Context con) {
			super();
		}
		public void run() {
			if (skip == 0) {
				dismissDialog(0);
				
				Log.i("varInfo",Long.toString(soundName));
				if (i < 3 + (int)(levelCalc / 3)&& replay == false) {
					float v = 1f;
					i++;
					Log.i("SATUS","RUNNING_SOUND_RANDOMISER");
					soundName = soundName * 10;
					int rn = rnd.nextInt(RND_MAX) + 1;
					Log.i("RANDOM",Long.toString(rn));
					switch (rn) {
						case 1:si = sp.play(sound1, v, v, 1, 0, 1f);soundName+=1;break;
						case 2:si = sp.play(sound2, v, v, 1, 0, 1f);soundName+=2;break;
						case 3:si = sp.play(sound3, v, v, 1, 0, 1f);soundName+=3;break;
						case 4:si = sp.play(sound4, v, v, 1, 0, 1f);soundName+=4;break;
						case 5:si = sp.play(sound5, v, v, 1, 0, 1f);soundName+=5;break;
						case 6:si = sp.play(sound6, v, v, 1, 0, 1f);soundName+=6;break;
						case 7:si = sp.play(sound7, v, v, 1, 0, 1f);soundName+=7;break;
						case 8:si = sp.play(sound8, v, v, 1, 0, 1f);soundName+=8;break;
					}
					Log.i("RANDOM",Long.toString(soundName));
					if (i == 3 + (int)(levelCalc / 3)) {
						canAnswer = true;
					}
				}
				if (i2 < 3 + (int)(levelCalc / 3)&&replay == true) {
					canAnswer = false;
					switch (Integer.parseInt(Character.toString(Long.toString(soundName).charAt(i2)))) {
						case 1:si = sp.play(sound1, 1, 1, 1, 0, 1f);break;
						case 2:si = sp.play(sound2, 1, 1, 1, 0, 1f);break;
						case 3:si = sp.play(sound3, 1, 1, 1, 0, 1f);break;
						case 4:si = sp.play(sound4, 1, 1, 1, 0, 1f);break;
						case 5:si = sp.play(sound5, 1, 1, 1, 0, 1f);break;
						case 6:si = sp.play(sound6, 1, 1, 1, 0, 1f);break;
						case 7:si = sp.play(sound7, 1, 1, 1, 0, 1f);break;
						case 8:si = sp.play(sound8, 1, 1, 1, 0, 1f);break;
					}
					i2++;
				}
				if (i2 > 3 + (int)(levelCalc / 3)&&replay == true) {
					Log.i("reseting","reseting1");
					canAnswer = true;
					replay = false;
					i2 = 0;
				}

				if (i2 == 3 + (int)(levelCalc / 3)&&replay == true) {
					Log.i("reseting","reseting2");
					canAnswer = true;
					replay = false;
				}
				
				//if (usn > 4000) {
					//MARKING
				
				//}
			}else{
				Log.i("SkipedvarInfo",Long.toString(soundName));
				skip--;
			//	usn = 0;
			//	soundName = 0; 
				canAnswer = false;
			//	i = 0;
			}
		}
	}
	//Touch Listiners
	public boolean onTouch(View v, MotionEvent event) {
		return false;
	};
	
	private OnClickListener Ocl1 = new OnClickListener() {
		public void onClick(View v) {
			if (canAnswer) {
				usn = usn * 10;
				usn = usn + 1;
				si = sp.play(sound1, 0.5f, 0.5f, 1, 0, 1f);
				Log.i("UserSoundName",Long.toString(usn));Log.i("SN", "" +(soundName - 100));
				answered++;
				if (usn > soundName - 100) {
					//MARKING
					mark();
				}
			}
		}
	};
	private OnClickListener Ocl2 = new OnClickListener() {
		public void onClick(View v) {
			if (canAnswer) {
				usn = usn * 10;
				usn = usn + 2;
				si = sp.play(sound2, 0.5f, 0.5f, 1, 0, 1f);
				Log.i("UserSoundName",Long.toString(usn));Log.i("SN", "" +(soundName - 100));
				answered++;
				if (usn > soundName - 100) {
					//MARKING
					mark();
				}
			}
		}
	};
	private OnClickListener Ocl3 = new OnClickListener() {
		public void onClick(View v) {
			if (canAnswer) {
				usn = usn * 10;
				usn = usn + 3;
				si = sp.play(sound3, 0.5f, 0.5f, 1, 0, 1f);
				Log.i("UserSoundName",Long.toString(usn));Log.i("SN", "" +(soundName - 100));
				answered++;
				if (usn > soundName - 100) {
					//MARKING
					mark();
				}
			}
		}
	};
	private OnClickListener Ocl4 = new OnClickListener() {
		public void onClick(View v) {
			if (canAnswer) {
				usn = usn * 10;
				usn = usn + 4;
				si = sp.play(sound4, 0.5f, 0.5f, 1, 0, 1f);
				Log.i("UserSoundName",Long.toString(usn));Log.i("SN", "" +(soundName - 100));
				answered++;
				if (usn > soundName - 100) {
					//MARKING
					mark();
				}
			}
		}
	};
	private OnClickListener Ocl5 = new OnClickListener() {
		public void onClick(View v) {
			if (canAnswer) {
				usn = usn * 10;
				usn = usn + 5;
				si = sp.play(sound5, 0.5f, 0.5f, 1, 0, 1f);
				Log.i("UserSoundName",Long.toString(usn));Log.i("SN", "" +(soundName - 100));
				answered++;
				if (usn > soundName - 100) {
					//MARKING
					mark();
				}
			}
		}
	};
	private OnClickListener Ocl6 = new OnClickListener() {
		public void onClick(View v) {
			if (canAnswer) {
				usn = usn * 10;
				usn = usn + 6;
				si = sp.play(sound6, 0.5f, 0.5f, 1, 0, 1f);
				Log.i("UserSoundName",Long.toString(usn));Log.i("SN", "" +(soundName - 100));
				answered++;
				if (usn > soundName - 100) {
					//MARKING
					mark();
				}
			}
		}
	};
	private OnClickListener Ocl7 = new OnClickListener() {
		public void onClick(View v) {
			if (canAnswer) {
				usn = usn * 10;
				usn = usn + 7;
				si = sp.play(sound7, 0.5f, 0.5f, 1, 0, 1f);
				Log.i("UserSoundName",Long.toString(usn));
				Log.i("SN", "" +(soundName - 100));
				answered++;
				if (usn > soundName - 100) {
					//MARKING
					mark();
				}
			}
		}
	};
	private OnClickListener Ocl8 = new OnClickListener() {
		public void onClick(View v) {
			if (canAnswer) {
				usn = usn * 10;
				usn = usn + 8;
				si = sp.play(sound8, 0.5f, 0.5f, 1, 0, 1f);
				Log.i("UserSoundName",Long.toString(usn));
				Log.i("SN", "" +(soundName - 100));
				answered++;
				if (usn > soundName - 100) {
					mark();
				}
			}
		}
	};
	private OnClickListener Oclreplay = new OnClickListener() {
		public void onClick(View v) {
			if (!replay) {
				i2 = 0;
				replay = true;
				canAnswer = false;
			}
		}
	};
	
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		Log.e("Test","AppStarted");
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, 
                                WindowManager.LayoutParams.FLAG_FULLSCREEN);
		setContentView(R.layout.main);
		Log.e("Test","LoadedLayout");
		//View view = findViewById(R.id.textView1);
		//view.setOnTouchListener(this);
		// Set the hardware buttons to control the music
		this.setVolumeControlStream(AudioManager.STREAM_MUSIC);
		showDialog(0);
		
		
		//restore
		SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);
	    levelPoints = settings.getFloat("levelPoints", 6f);
	    userPoints = settings.getFloat("userPoints", 0f);
	    level = settings.getFloat("level", 0f);
	    
	    pb = (ProgressBar) findViewById(R.id.progressBar1);
	    pb.setProgressDrawable(getResources().getDrawable(R.drawable.progress));
	    
	    TextView ltv = (TextView) findViewById(R.id.levelText1);
		ltv.setText("Level " + Integer.toString(((int)level)+1));
	    
		ImageView b1 = (ImageView)findViewById(R.id.b1);
		b1.setOnClickListener(Ocl1);
		ImageView b2 = (ImageView)findViewById(R.id.b2);
		b2.setOnClickListener(Ocl2);
		ImageView b3 = (ImageView)findViewById(R.id.b3);
		b3.setOnClickListener(Ocl3);
		ImageView b4 = (ImageView)findViewById(R.id.b4);
		b4.setOnClickListener(Ocl4);
		ImageView b5 = (ImageView)findViewById(R.id.b5);
		b5.setOnClickListener(Ocl5);
		ImageView b6 = (ImageView)findViewById(R.id.b6);
		b6.setOnClickListener(Ocl6);
		ImageView b7 = (ImageView)findViewById(R.id.b7);
		b7.setOnClickListener(Ocl7);
		ImageView b8 = (ImageView)findViewById(R.id.b8);
		b8.setOnClickListener(Ocl8);
		ImageView br = (ImageView)findViewById(R.id.breplay);
		br.setOnClickListener(Oclreplay);
		
		if (level < 12) {
			 b7.setVisibility(0);//8 = GONE
			 b7.setImageResource(R.drawable.trans);
			 b8.setVisibility(0);//8 = GONE
			 b8.setImageResource(R.drawable.trans);
			 RND_MAX = 6;
		 }
		if (level < 6) {
			 b5.setVisibility(0);//8 = GONE
			 b5.setImageResource(R.drawable.trans);
			 b6.setVisibility(0);//8 = GONE
			 b6.setImageResource(R.drawable.trans);
			 RND_MAX = 4;
		 }
		if (level < 1) {
			b3.setVisibility(0);//8 = GONE
			b3.setImageResource(R.drawable.trans);
			b4.setVisibility(0);//8 = GONE
			b4.setImageResource(R.drawable.trans);
			RND_MAX = 2;
		}
		if (level < 1) {
			ImageView tv = (ImageView)findViewById(R.id.textView1);
			tv.setVisibility(0);
		}
		int progress = (int) ((userPoints / levelPoints)*100);
		pb.setProgress(progress);
		sp = new SoundPool(10, AudioManager.STREAM_MUSIC, 0);
		sp.setOnLoadCompleteListener(new OnLoadCompleteListener() {
			public void onLoadComplete(SoundPool soundPool, int sampleId,
					int status) {
				loaded++;
				Log.i("Sound","OneJustLoaded");
			}
		});
		sound2= sp.load(this, R.raw.s1, 1);
		sound1= sp.load(this, R.raw.s2, 1);
		sound4= sp.load(this, R.raw.s3, 1);
		sound3= sp.load(this, R.raw.s4, 1);
		sound6= sp.load(this, R.raw.s5, 1);
		sound5= sp.load(this, R.raw.s6, 1);
		sound8= sp.load(this, R.raw.s7, 1);
		sound7= sp.load(this, R.raw.s8, 1);
		Log.i("Sound",Integer.toString(loaded));
		
		timerPhy = new TimerPhy(this);
		//timer.schedule(timerPhy, 0, 1000);
		

	}
	protected void onStart() {
		super.onStart();
		timer.schedule(timerPhy, 3000, 1000);
	}
    protected void onStop(){
        super.onStop();

       // We need an Editor object to make preference changes.
       // All objects are from android.context.Context
       SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);
       SharedPreferences.Editor editor = settings.edit();
       editor.putFloat("levelPoints", levelPoints);
       editor.putFloat("userPoints", userPoints);
       editor.putFloat("level", level);
       editor.putBoolean("HasPlayed", true);

       Log.i("info","Quitting:(");
       
       // Commit the edits!
       editor.commit();
       
       timer.cancel();
       sp.stop(si);
     }
    public boolean onKeyDown(int keyCode, KeyEvent event) {
    	if ( keyCode == KeyEvent.KEYCODE_BACK ) {
    		 SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);
    	       SharedPreferences.Editor editor = settings.edit();
    	       editor.putFloat("levelPoints", levelPoints);
    	       editor.putFloat("userPoints", userPoints);
    	       editor.putFloat("level", level);
    	       editor.putBoolean("HasPlayed", true);

    	       Log.i("info","Quitting:(");
    	       
    	       // Commit the edits!
    	       editor.commit();
            Log.i("INFO", "MENU pressed");
            Intent intent = new Intent(this, MenuActivity.class);
            startActivity(intent);
            finish();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

}
